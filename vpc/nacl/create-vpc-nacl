#!/usr/bin/env bash

# Create VPC
VPC_ID=$(aws ec2 create-vpc --cidr-block "10.10.0.0/16" \
    --region us-east-1 \
    --tag-specifications 'ResourceType=vpc,Tags=[{Key=Name,Value=PracticeVPC}]' \
    --query Vpc.VpcId \
    --output text
)

echo "VPC ID: $VPC_ID"

# Create Subnet
SUBNET_ID=$(aws ec2 create-subnet --vpc-id $VPC_ID \
    --cidr-block 10.10.0.0/20 \
    --query Subnet.SubnetId \
    --output text
)
echo "Subnet ID: $SUBNET_ID"

# Create Internet Gateway
IGW_ID=$(aws ec2 create-internet-gateway --query InternetGateway.InternetGatewayId --output text)
aws ec2 attach-internet-gateway --vpc-id $VPC_ID --internet-gateway-id $IGW_ID
echo "Internet Gateway ID: $IGW_ID"

# Configure route table to explicity associate subnets
ROUTE_TABLE_ID=$(aws ec2 describe-route-tables \
    --filters "Name=vpc-id,Values=${VPC_ID}" \
    --query 'RouteTables[0].RouteTableId' \
    --output text
)

echo "Route Table ID: $ROUTE_TABLE_ID"

# Add route to Internet Gateway
echo "Adding route to IGW..."
aws ec2 create-route --route-table-id $ROUTE_TABLE_ID --destination-cidr-block 0.0.0.0/0 --gateway-id $IGW_ID

aws ec2 associate-route-table --route-table-id $ROUTE_TABLE_ID --subnet-id $SUBNET_ID

# Create NACL
NACL_ID=$(aws ec2 create-network-acl --vpc-id $VPC_ID \
    --query NetworkAcl.NetworkAclId \
    --output text
)

echo "Created NACL"

# Allow all inbound traffic
aws ec2 create-network-acl-entry \
    --network-acl-id $NACL_ID \
    --ingress \
    --rule-number 100 \
    --protocol -1 \
    --port-range From=0,To=65535 \
    --cidr-block 0.0.0.0/0 \
    --rule-action allow

# Allow all outbound traffic
aws ec2 create-network-acl-entry \
    --network-acl-id $NACL_ID \
    --egress \
    --rule-number 100 \
    --protocol -1 \
    --port-range From=0,To=65535 \
    --cidr-block 0.0.0.0/0 \
    --rule-action allow

echo "NACL Inbound and outbound rules created"

# Deny from a specific IP
aws ec2 create-network-acl-entry \
    --network-acl-id $NACL_ID \
    --ingress \
    --rule-number 90 \
    --protocol -1 \
    --port-range From=0,To=65535 \
    --cidr-block 174.5.108.3/32 \
    --rule-action deny

echo "Deny access to ip 174.5.108.3/32"

# Create EC2 keypair
aws ec2 create-key-pair --key-name MyKeyPair --query 'KeyMaterial' --output text > MyKeyPair.pem
chmod 400 MyKeyPair.pem

# Deploy CloudFormation stack
aws cloudformation deploy \
    --template-file "template.yml" \
    --stack-name "my-nacl-stack" \
    --parameter-overrides SubnetID=$SUBNET_ID VpcID=$VPC_ID \
    --capabilities CAPABILITY_IAM

# Get the instance ID from the stack outputs
INSTANCE_ID=$(aws cloudformation describe-stack-resources \
    --stack-name "my-nacl-stack" \
    --query "StackResources[?LogicalResourceId=='MyEC2Instance'].PhysicalResourceId" \
    --output text)

echo "The instance ID is: $INSTANCE_ID"

# Wait for instance to be running
aws ec2 wait instance-running --instance-ids $INSTANCE_ID

# Get Public IP
PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
echo "Public IP: $PUBLIC_IP"

# Test connectivity (assuming an HTTP server is running on the instance)
echo "Testing connectivity to $PUBLIC_IP..."
curl http://$PUBLIC_IP

# To tear down delete Keypair, CFN, and VPC